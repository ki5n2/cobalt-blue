{
  
    
        "post0": {
            "title": "IR 4. for문, 2007(나) 6월/평가원 14(고3), 2004(인)/수능(홀) 19(고3), 2010(나)/수능(홀) 30(고3)",
            "content": ". Introduce R . lenture: Introduce R_3nd week of lectures. | lenture date: 2021-09-28 | lecturer: Guebin choi | study date: 2022-02-08 | author: Kione kim | . . For&#47928; . s=0 for(i in 1:4){ #1:4 = c(1,2,3,4) s=s+i } s . [1] 10 . 위의 for문은 아래의 코드와 같음 | . s=0 i=1 s=s+i i=2 s=s+i i=3 s=s+i i=4 s=s+i s . [1] 10 . 2007(&#45208;) 6&#50900;/&#54217;&#44032;&#50896; 14(&#44256;3) . 다음은 어느 회사의 연봉에 대한 규정이다. . (가) 입사 첫째 해 연봉은 a원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. . (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 2/3로 한다. . 문제 이 회사에 입사한 사람이 28년동안 근무하여 받는 연봉의 총합은? (단, $1.08^{18}=4$로 계산한다) . (1) $ frac{101}{2}a$ . (2) $ frac{111}{2}a$ . (3) $ frac{121}{2}a$ . (4) $ frac{131}{2}a$ . (5) $ frac{141}{2}a$ . a &lt;- c() a[1]=1 for(i in 2:19){ a[i]=a[i-1]*1.08 } a . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 . for(i in 20:28){ a[i]=a[19]*2/3 } a . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 2.664013 2.664013 2.664013 2.664013 2.664013 [25] 2.664013 2.664013 2.664013 2.664013 . sum(a) . [1] 65.42238 . 답은 65.42238이다. | . a=1 for(i in 2:19){ a=a*1.08 } a . [1] 3.996019 . 위의 코드는 19번째 연봉을 구할 수는 있으나, 20번째 이후의 연봉을 구할 수 없다. | . 2004(&#51064;)/&#49688;&#45733;(&#54848;) 19(&#44256;3) . - 자료 $x_1,x_2, ... ,x_{100}$에 대하여 다음 과정을 순서대로 시행하였다. . (가) 처음 두 수 $x_1$과 $x_2$의 평균을 구한다. . (나) $x_3$을 추가하여 $x_1,x_2,x_3$의 평균을 구한다. . (다) $x_4$을 추가하여 $x_1,x_2,x_3,x_4$의 평균을 구한다. . ... . $x_{100}$을 추가하여 $x_1,x_2,x_3,...,x_{100}$의 평균을 구한다. . 문제 위의 과정을 시행할 결과, $x_1$과 $x_2$의 평균이 5이고, 자료 하나가 추가될때 마다 평균이 1씩 증가하였다. 이때 $x_{100}$의 값은? . (1) 194 . (2) 196 . (3) 198 . (4) 200 . (5) 202 . x &lt;- c() x[1]=5 x[2]=5 . for(i in 3:100){ temp_ = mean(x[1:(i-1)])+1 # temp_는 1~i까지의 평균(i=3, mean(x[1:2])=5이고 +1은 6) sum_ = temp_*i # sum_는 1~i까지의 원소의 합(i=3, sum_는 6*3) x[i] = sum_ - sum(x[1:(i-1)]) # x[i]값 } x . [1] 5 5 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 [19] 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 [37] 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 [55] 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 [73] 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 [91] 184 186 188 190 192 194 196 198 200 202 . x[100] . [1] 202 . 2010(&#45208;)/&#49688;&#45733;(&#54848;) 30(&#44256;3) . 문제 수열 $ {a_n }$에 대하여 첫째항부터 제 $n$항까지의 합을 $S_n$이라고 하자. 수열 $ {S_{2n-1} }$은 공차가 -3인 등차수열이고, 수열 $ {S_{2n} }$은 공차가 2인 등차수열이다. $a_2=1$일 때, $a_8$의 값을 구하시오. . $S_3=S_1-3$ . $S_5=S_3-3$ . ... . $S_4=S_2+2$ . $S_6=S_4+2$ . ... 어떤 식으로 코드를 작성해야 할지 도움을 준다. . a &lt;- c() a[1] = 0 # 일단 0이라고 하자. a[2] = 1 . s &lt;- c() s[1] = a[1] s[2] = a[1]+a[2] . 구현해야 할 코드: for(n in 3:100){ n이 홀수라면(n %% == 1) s[n] = s[n-2]-3 n이 짝수라면(n %% == 0) s[n] = s[n-2]+2 } s . - 위처럼 구현하기 위해선, 1) 홀수인지 짝수인지 판단하기 위해 나머지(%%) 함수를 활용해야 하고 2) 이를 if문을 통해 구현해야 한다. . 1:10 %% 2 # %%는 나머지 값을 나타내줌. . [1] 1 0 1 0 1 0 1 0 1 0 . 1:10 %% 3 . [1] 1 2 0 1 2 0 1 2 0 1 . for(n in 3:100){ if(n%%2 == 1){ s[n]=s[n-2]-3 }else{ s[n]=s[n-2]+2 } } . s . [1] 0 1 -3 3 -6 5 -9 7 -12 9 -15 11 -18 13 -21 [16] 15 -24 17 -27 19 -30 21 -33 23 -36 25 -39 27 -42 29 [31] -45 31 -48 33 -51 35 -54 37 -57 39 -60 41 -63 43 -66 [46] 45 -69 47 -72 49 -75 51 -78 53 -81 55 -84 57 -87 59 [61] -90 61 -93 63 -96 65 -99 67 -102 69 -105 71 -108 73 -111 [76] 75 -114 77 -117 79 -120 81 -123 83 -126 85 -129 87 -132 89 [91] -135 91 -138 93 -141 95 -144 97 -147 99 . s[8]-s[7] . [1] 16 . 답은 16이다. | 한 가지 의문점: a[1]=0으로 일단 놓았는데, 이 값에 대해 문제에서 정의하지 않았다. 만약 a[1]이 0이 아닌 다른 값이라면 앞서 구한 값도 달라지는 것은 아닐까? | . a &lt;- c() a[1] = 100 # 일단 0이라고 하자. a[2] = 1 . s &lt;- c() s[1] = a[1] s[2] = a[1]+a[2] . for(n in 3:100){ if(n%%2 == 1){ s[n]=s[n-2]-3 }else{ s[n]=s[n-2]+2 } } s . [1] 100 101 97 103 94 105 91 107 88 109 85 111 82 113 79 115 76 117 [19] 73 119 70 121 67 123 64 125 61 127 58 129 55 131 52 133 49 135 [37] 46 137 43 139 40 141 37 143 34 145 31 147 28 149 25 151 22 153 [55] 19 155 16 157 13 159 10 161 7 163 4 165 1 167 -2 169 -5 171 [73] -8 173 -11 175 -14 177 -17 179 -20 181 -23 183 -26 185 -29 187 -32 189 [91] -35 191 -38 193 -41 195 -44 197 -47 199 . s[8]-s[7] . [1] 16 . a[1]에 다른 값을 놓아도 a[8]이 달라지지 않는다. | .",
            "url": "https://ki5n2.github.io/cobalt-blue/2022/02/08/IR.html",
            "relUrl": "/2022/02/08/IR.html",
            "date": " • Feb 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "IR 3. R을 이용한 평가원 문제 풀이",
            "content": ". Introduce R . lecture: Introduce R_3nd week of lectures. | lecture date: 2021-09-16 | lecturer: Guebin choi | study date: 2022-01-28 | author: Kione kim | . . options(jupyter.rich_display=FALSE) . 1. 2010(&#45208;) 6&#50900;/&#54217;&#44032;&#50896; 4 (&#44256;3) . &#49892;&#49688; $a$&#44032; $ frac{2^a+2^{-a}}{2^{a}-2^{-a}}=-2$&#47484; &#47564;&#51313;&#49884;&#53420;&#46412;, $4^a+4^{-a}$&#51032; &#44050;&#51008;? . (1) $ frac{5}{2}$ (2) $ frac{10}{3}$ (3) $ frac{17}{4}$ (4) $ frac{26}{5}$ (5) $ frac{37}{6}$ . - 다음과 같은 방법으로 하면 안 된다. . a &lt;- c(5/2, 10/3, 17/4, 26/5, 37/6) y &lt;- (2^(a)+2^(-a))/(2^(a)-2^(-a)) . a y . [1] 2.500000 3.333333 4.250000 5.200000 6.166667 . [1] 1.064516 1.019882 1.005540 1.001481 1.000388 . y == -2 . [1] FALSE FALSE FALSE FALSE FALSE . y &lt;- $ frac{2^a+2^{-a}}{2^{a}-2^{-a}}$에서 $ frac{2^a+2^{-a}}{2^{a}-2^{-a}}$를 y에 입력한다고 함수가 만들어지는 것은 아니기 때문 | . 풀이: f(a) = $ frac{2^a+2^{-a}}{2^{a}-2^{-a}}$로 두고 f(a) = -2를 만족하는 a를 찾는다. 그러기 위해선 함수를 먼저 선언해야 한다. . f &lt;- function(a){ (2^(a)+2^(-a))/(2^(a)-2^(-a)) } . f(1) . [1] 1.666667 . - 그림을 통해 해를 찾아보자. . a=seq(from=-5,to=5,by=0.1) a . [1] -5.0 -4.9 -4.8 -4.7 -4.6 -4.5 -4.4 -4.3 -4.2 -4.1 -4.0 -3.9 -3.8 -3.7 -3.6 [16] -3.5 -3.4 -3.3 -3.2 -3.1 -3.0 -2.9 -2.8 -2.7 -2.6 -2.5 -2.4 -2.3 -2.2 -2.1 [31] -2.0 -1.9 -1.8 -1.7 -1.6 -1.5 -1.4 -1.3 -1.2 -1.1 -1.0 -0.9 -0.8 -0.7 -0.6 [46] -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 [61] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 [76] 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 [91] 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 . plot(a,f(a)) abline(h=-2,col=&#39;red&#39;) . y축인 f(a)=-2인 지점과 만나는 x축의 점이 해가 된다. | . - 그림을 조금 더 좁혀서 그려보자. . a = seq(from=-2, to=0, by=0.0001) . plot(a,f(a)) abline(h=-2,col=&#39;red&#39;) . a가 0 근처로 갈 수록 f(a) 값이 매우 커지거나 작아지는 그래프이므로 이와 같은 그래프가 그려졌다. | a가 0일 때, 분모인 ${2^{a}-2^{-a}}$이 0이 되기 때문 | . a = seq(from=-2, to=-0.1, by=0.0001) . plot(a,f(a)) abline(h=-2,col=&#39;red&#39;) . 좀 더 명확하게 알 수 있다. | . - 이제 다시 돌아와서 수식적으로 해를 구해보자. . . 위의 코드를 실행하면 값이 너무 많아 TRUE 값이 있는지 확인하기 어렵다. | . . TIP: . 컴퓨터는 TRUE &amp; FALSE를 각각 1 &amp; 0 으로 인식한다. . c(TRUE, FALSE) . [1] TRUE FALSE . TRUE + FALSE . [1] 1 . 3*(TRUE) . [1] 3 . 3*(TRUE)*FALSE . [1] 0 . sum(c(TRUE,TRUE,FALSE)) . [1] 2 . . sum(f(a) == -2) . [1] 0 . TRUE값이 최소 한 개는 존재할 것인데, 존재하지 않는 것으로 나타났다. | . - 이는 컴퓨터가 근사적으로 수를 계산했기 때문이다. 이 방식으로 f(a)=-2인 해를 정확히 찾아내긴 힘들기 때문에 근사적으로 f(a)=-2인 해를 찾는 것이 바람직하다. . : $f(a) approx -2 $를 찾는 것은 $f(a) approx -2 +2 = 0 $ 인 a를 찾는 것과 같기 때문에 $f(a) +2 $ 의 절대값이 0에 가장 가까운 원소를 찾으면 된다. . - 절대값은 abs() 함수를 이용하면 된다. . abs(c(-3,5,-99)) # 예시1 . [1] 3 5 99 . min(abs(c(-3,5,-99))) # 예시2 . [1] 3 . plot(a,abs(f(a)+2)) . 위의 플랏은 $f(a) +2 $인 값들에 절대값을 취해준 그림($y$축은 $0$ 또는 양수)으로 $f(a) +2 $가 $0$에 근사적으로 가장 가까운 값을 구하려면 $y$축의 가장 작은 값인 $abs(f(a) + 2)$의 최소값을 구하면 된다. | . min(abs(f(a)+2)) . [1] 3.898777e-05 . min(abs(f(a)+2)) == 3.898777e-05 . [1] FALSE . sum(abs(f(a)+2) == 3.898777e-05) . [1] 0 . 이 또한 FALSE로 나타내기 때문에 다음과 같은 코드로 진행한다. | . sum(abs(f(a)+2) == min(abs(f(a)+2))) . [1] 1 . . a[abs(f(a)+2) == min(abs(f(a)+2))] . [1] -0.7925 . x_ = abs(f(a)+2) == min(abs(f(a)+2)) . a[x_] . [1] -0.7925 . a값은 $-0.7925$로 나타났다. 따라서 $4^{a}+4^{-a}$는 $4^{-0.7925}+4^{0.7925}$를 계산하면 된다. | . 4^{-0.7925}+4^{0.7925} . [1] 3.333403 . $4^{a}+4^{-a}$는 3.333임을 알 수 있다. | . 2. 2021(&#44032;) 9&#50900;/&#54217;&#44032;&#50896; 10(&#44256;3) . &#49688;&#50676; $ {a_n }$&#51008; $a_1=12$&#51060;&#44256;, &#47784;&#46304; &#51088;&#50672;&#49688; $n$&#50640; &#45824;&#54616;&#50668; $a_{n+1}+a_n=(-1)^{n+1} times n$&#51012; &#47564;&#51313;&#49884;&#53416;&#45796;. $a_k&gt; a_1$&#51064; &#51088;&#50672;&#49688; $k$&#51032; &#52572;&#49548;&#44050;&#51008;? . (1) $2$ (2) $4$ (3) $6$ (4) $8$ (5) $10$ . 풀이1 . a1 = 12 n=1 a2= -a1 +(-1)^(n+1)*n n=2 a3= -a2 +(-1)^(n+1)*n n=3 a4= -a3 +(-1)^(n+1)*n n=4 a5= -a4 +(-1)^(n+1)*n n=5 a6= -a5 +(-1)^(n+1)*n n=6 a7= -a6 +(-1)^(n+1)*n n=7 a8= -a7 +(-1)^(n+1)*n n=8 a9= -a8 +(-1)^(n+1)*n n=9 a10= -a9 +(-1)^(n+1)*n . a &lt;- c(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) a . [1] 12 -11 9 -6 2 3 -9 16 -24 33 . a&gt;12 a&gt;a1 . [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE . [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE . (1:10)[a&gt;12] . [1] 8 10 . 하지만 이 코드는 확장성이 없고 간단하지 않음 | . 풀이2 . . 예비학습: 벡터를 넣는 또 다른 방법 . a_ &lt;- c() . a_ . NULL . a_[1] &lt;- 12 . a_[1] . [1] 12 . a_[2] &lt;- -11 . a_[2] . [1] -11 . a_[4] &lt;- -6 . a_[4] . [1] -6 . a_ . [1] 12 -11 NA -6 . . * for문을 활용한 간단하면서도 확장성 있는 풀이 . a &lt;- c() a . NULL . a[1] &lt;- 12 . 목표: $n=1$~$9$ $a_{n+1}= -a_n +(-1)^{n+1}*n$ 을 구현하는 것 . for(n in 1:9){ a[n+1] &lt;- -a[n] + (-1)^(n+1)*n } . a . [1] 12 -11 9 -6 2 3 -9 16 -24 33 . a&gt;12 a&gt;a[1] . [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE . [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE . (1:10)[a&gt;12] . [1] 8 10 . 따라서 답은 k=8 이다. | . for(n in 1:20){ a[n+1] &lt;- -a[n] + (-1)^(n+1)*n } a . [1] 12 -11 9 -6 2 3 -9 16 -24 33 -43 54 -66 79 -93 [16] 108 -124 141 -159 178 -198 . a&gt;12 (1:20)[a&gt;12] . [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE FALSE TRUE [13] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE . [1] 8 10 12 14 16 18 20 .",
            "url": "https://ki5n2.github.io/cobalt-blue/2022/01/28/IR.html",
            "relUrl": "/2022/01/28/IR.html",
            "date": " • Jan 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "IR 2. 벡터인덱싱, 메인플랏과 서브플랏, 주석이용법",
            "content": ". Introduce R . lenture: Introduce R_2nd week of lectures. | lecture date: 2021-09-14 | lecturer: Guebin choi | study date: 2022-01-27 | author: Kione kim | . . options(jupyter.rich_display=FALSE) # print() 사용하지 않아도 동일하게 출력 options(jupyter.plot_scale=3) # 숫자가 커질 수록 플랏의 사이즈가 작아짐 options(repr.plot.width=6,repr.plot.height=6,repr.plot.res=300) # 그림의 크기 조절 options(jupyter.display_mimetypes=c(&quot;text/html&quot;)) options(max.print=1000) . 1. &#48289;&#53552;&#51064;&#45937;&#49905; . 1) &#50896;&#49548; &#49692;&#49436;&#50640; &#46384;&#47480; &#51064;&#45937;&#49905; . x &lt;- c(5,-10,15,-20,25,-30,35) x . [1] 5 -10 15 -20 25 -30 35 . x[1] # 첫 번째 원소 추출 . [1] 5 . x[3] # 세번째 원소 추출 . [1] 15 . 1:3 . [1] 1 2 3 . c(1:3) . [1] 1 2 3 . 1:3과 c(1:3)은 같음 | . x[1:3] # 첫번째부터 세번째까지의 원소 추출 . [1] 5 -10 15 . x[c(1:3)] # c(1:3)은 1:3와 같은 값을 추출하므로 위와 동일한 결과가 나타남 . [1] 5 -10 15 . x[c(1,2,3)] # c(1,2,3)은 c(1:3)와 같고 이는 1:3과 같으므로 이 또한 같다. . [1] 5 -10 15 . x[1,2,3] . Error in x[1, 2, 3]: incorrect number of dimensions Traceback: . 1:3이 1,2,3이라고 해서 x[1,2,3]을 하면 안 된다. 오류가 뜬다. 두 개 이상의 원소를 []안에 입력할 때는 :을 사용하거나 c()을 이용해야 한다. | . x[c(2,5,6)] # 두번째, 다섯번째, 여섯번째 원소 추출 . [1] -10 25 -30 . x[2,5,6] # 마찬가지의 오류 . Error in x[2, 5, 6]: incorrect number of dimensions Traceback: . x[-3] # 세번째 원소 제외하고 추출 . [1] 5 -10 -20 25 -30 35 . x[-c(3:4)] # 세번째, 네번쨰 원소 제외하고 추출 . [1] 5 -10 25 -30 35 . x[-(3:4)] . [1] 5 -10 25 -30 35 . 2) &#51312;&#44148;&#50640; &#46384;&#47480; &#51064;&#45937;&#49905; . - 양수인 원소를 뽑는 법 . x&gt;0 . [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE . x[x&gt;0] . [1] 5 15 25 35 . - 25 이상인 원소 추출 . x&gt;=25 . [1] FALSE FALSE FALSE FALSE TRUE FALSE TRUE . x[x&gt;=25] . [1] 25 35 . - 문법 . A_ &lt;- c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE) . x[A_] # x의 네번째 원소(TRUE) 추출하게 됨 . [1] -20 . TRUE 또는 FALSE로 이루어진 것이 [,,,]안에 들어가게 되면 TRUE 값만 추출하게 된다. | . x == 15 # 값이 15인지 아닌지 확인 x[x == 15] # TRUE 값 추출 . [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE . [1] 15 . - 응용예제 1 . x &lt;- c(1,2,3,4,5) y &lt;- x^2 . x y . [1] 1 2 3 4 5 . [1] 1 4 9 16 25 . - $y=x^2=9$가 되도록 만드는 $x$는? . y == 9 x[y == 9] . [1] FALSE FALSE TRUE FALSE FALSE . [1] 3 . - 응용예제 2 . x &lt;- c(-3,-2,-1,1,2,3) y &lt;- (8*x)/(x^5) . x y . [1] -3 -2 -1 1 2 3 . [1] 0.09876543 0.50000000 8.00000000 8.00000000 0.50000000 0.09876543 . - $y=(8*x)/(x^5)=0.5$가 되도록 만드는 $x$는? . y == 0.5 . [1] FALSE TRUE FALSE FALSE TRUE FALSE . x[y == 0.5] . [1] -2 2 . 2. &#44536;&#47548; &#44536;&#47532;&#44592;: &#47700;&#51064;&#54540;&#46991;&#44284; &#49436;&#48652;&#54540;&#46991; . - 메인플랏: 그림자체를 생성해주는 plot 과 같은 명령을 통해 그려진 그림 - 서브플랏: 생성된 그림에 덧붙여서만 그릴수 있는 lines, points, abline 과 같은 함수를 통해 그려진 그림 . - 중요: 서브플랏에 사용되는 함수들(lines, points, abline 등)은 단독으로 사용할 수 없다.(plot이 먼저 그려진 후에 사용할 수 있다.) . x &lt;- 1:60/10 x . [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [20] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 [39] 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 [58] 5.8 5.9 6.0 . y &lt;- sin(x) y . [1] 0.09983342 0.19866933 0.29552021 0.38941834 0.47942554 0.56464247 [7] 0.64421769 0.71735609 0.78332691 0.84147098 0.89120736 0.93203909 [13] 0.96355819 0.98544973 0.99749499 0.99957360 0.99166481 0.97384763 [19] 0.94630009 0.90929743 0.86320937 0.80849640 0.74570521 0.67546318 [25] 0.59847214 0.51550137 0.42737988 0.33498815 0.23924933 0.14112001 [31] 0.04158066 -0.05837414 -0.15774569 -0.25554110 -0.35078323 -0.44252044 [37] -0.52983614 -0.61185789 -0.68776616 -0.75680250 -0.81827711 -0.87157577 [43] -0.91616594 -0.95160207 -0.97753012 -0.99369100 -0.99992326 -0.99616461 [49] -0.98245261 -0.95892427 -0.92581468 -0.88345466 -0.83226744 -0.77276449 [55] -0.70554033 -0.63126664 -0.55068554 -0.46460218 -0.37387666 -0.27941550 . plot(x,y,col=&#39;blue&#39;) . plot(x,y,col=&#39;red&#39;) plot(x,y^2,type=&#39;l&#39;) . plot(x,y,col=&#39;blue&#39;) plot(x,y^2,col=&#39;red&#39;) . plot(x,y,type=&#39;l&#39;,col=&#39;blue&#39;) lines(x,y^2,col=&#39;red&#39;) . plot(x,y,col=&#39;red&#39;) points(x,y^2,col=&#39;blue&#39;) . lines(x,y,col=&#39;red&#39;) plot(x,y^2,col=&#39;blue&#39;) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y, col = &#34;red&#34;) 2. lines.default(x, y, col = &#34;red&#34;) 3. plot.xy(xy.coords(x, y), type = type, ...) . 서브플랏이 먼저 존재하지 않기에 에러가 난다. | .",
            "url": "https://ki5n2.github.io/cobalt-blue/2022/01/27/IR.html",
            "relUrl": "/2022/01/27/IR.html",
            "date": " • Jan 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "IR 1. 변수설정 팁, 벡터선언, 함수설정",
            "content": ". Introduce R . lenture: Introduce R_2nd week of lectures. | lenture date: 2021-09-09 | lecturer: Guebin choi | study date: 2022-01-24 | author: Kione kim | . . 학습동기:R을 강의를 통해 자세히 학습한 적은 없고 구글링, 유튜브, 책 등을 통해 필요한 부분만 습득했다. 코딩을 할 때 모르는 부분이 나왔을 때 막막했던 적이 많았기에 R의 기초를 다질필요가 있다고 생각했다. 해당 강의는 개인적으로 좋아하는 교수님의 강의이고 기초적인 부분을 자세히 가르쳐줄 뿐만 아니라 심화된 내용까지 다루고 있다. 따라서 해당 강의를 따라가며 R의 기본기를 다질 예정이다. . options(jupyter.rich_display=FALSE) . 1. &#48320;&#49688;&#51060;&#47492;&#49444;&#51221; &#54017; . - 변수 이름 축약 시 모음을 제외하면 좋다. . result -&gt; rslt | residual -&gt; rsdl | . - 임시 변수를 설정할 경우 변수이름 뒤 언더바(_)를 붙인다. . x, y, z_ | . 2. &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . - 방법 1: 직접 입력 . c(3,3,2,1,3,2,2) . &lt;ol class=list-inline&gt;3 | 3 | 2 | 1 | 3 | 2 | 2 | &lt;/ol&gt; - 방법 2: seq를 이용 . seq(from=0,to=10,by=0.1) # 0부터 10까지 0.1간격의 수열 . &lt;ol class=list-inline&gt;0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1 | 1.1 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6 | 1.7 | 1.8 | 1.9 | 2 | 2.1 | 2.2 | 2.3 | 2.4 | 2.5 | 2.6 | 2.7 | 2.8 | 2.9 | 3 | 3.1 | 3.2 | 3.3 | 3.4 | 3.5 | 3.6 | 3.7 | 3.8 | 3.9 | 4 | 4.1 | 4.2 | 4.3 | 4.4 | 4.5 | 4.6 | 4.7 | 4.8 | 4.9 | 5 | 5.1 | 5.2 | 5.3 | 5.4 | 5.5 | 5.6 | 5.7 | 5.8 | 5.9 | 6 | 6.1 | 6.2 | 6.3 | 6.4 | 6.5 | 6.6 | 6.7 | 6.8 | 6.9 | 7 | 7.1 | 7.2 | 7.3 | 7.4 | 7.5 | 7.6 | 7.7 | 7.8 | 7.9 | 8 | 8.1 | 8.2 | 8.3 | 8.4 | 8.5 | 8.6 | 8.7 | 8.8 | 8.9 | 9 | 9.1 | 9.2 | 9.3 | 9.4 | 9.5 | 9.6 | 9.7 | 9.8 | 9.9 | 10 | &lt;/ol&gt; seq(0,10,0.1) # 생략해도 됨 . &lt;ol class=list-inline&gt;0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1 | 1.1 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6 | 1.7 | 1.8 | 1.9 | 2 | 2.1 | 2.2 | 2.3 | 2.4 | 2.5 | 2.6 | 2.7 | 2.8 | 2.9 | 3 | 3.1 | 3.2 | 3.3 | 3.4 | 3.5 | 3.6 | 3.7 | 3.8 | 3.9 | 4 | 4.1 | 4.2 | 4.3 | 4.4 | 4.5 | 4.6 | 4.7 | 4.8 | 4.9 | 5 | 5.1 | 5.2 | 5.3 | 5.4 | 5.5 | 5.6 | 5.7 | 5.8 | 5.9 | 6 | 6.1 | 6.2 | 6.3 | 6.4 | 6.5 | 6.6 | 6.7 | 6.8 | 6.9 | 7 | 7.1 | 7.2 | 7.3 | 7.4 | 7.5 | 7.6 | 7.7 | 7.8 | 7.9 | 8 | 8.1 | 8.2 | 8.3 | 8.4 | 8.5 | 8.6 | 8.7 | 8.8 | 8.9 | 9 | 9.1 | 9.2 | 9.3 | 9.4 | 9.5 | 9.6 | 9.7 | 9.8 | 9.9 | 10 | &lt;/ol&gt; seq(from=0,to=1,length.out = 11) # 0부터 1까지 등간격의 11개의 수열 . &lt;ol class=list-inline&gt;0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1 | &lt;/ol&gt; - 방법 3: :를 이용 . 1:10 . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; 이 방법으로 위의 n개의 등간격 수열을 만들 수 있다. | . print(0:30/30) . [1] 0.00000000 0.03333333 0.06666667 0.10000000 0.13333333 0.16666667 [7] 0.20000000 0.23333333 0.26666667 0.30000000 0.33333333 0.36666667 [13] 0.40000000 0.43333333 0.46666667 0.50000000 0.53333333 0.56666667 [19] 0.60000000 0.63333333 0.66666667 0.70000000 0.73333333 0.76666667 [25] 0.80000000 0.83333333 0.86666667 0.90000000 0.93333333 0.96666667 [31] 1.00000000 . print(seq(from=0,to=1,length.out = 31)) . [1] 0.00000000 0.03333333 0.06666667 0.10000000 0.13333333 0.16666667 [7] 0.20000000 0.23333333 0.26666667 0.30000000 0.33333333 0.36666667 [13] 0.40000000 0.43333333 0.46666667 0.50000000 0.53333333 0.56666667 [19] 0.60000000 0.63333333 0.66666667 0.70000000 0.73333333 0.76666667 [25] 0.80000000 0.83333333 0.86666667 0.90000000 0.93333333 0.96666667 [31] 1.00000000 . - 방법 4: req를 이용 . rep(0,100) # 0을 100번 반복 . &lt;ol class=list-inline&gt;0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | &lt;/ol&gt; print(rep(0,100)) . [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . 3. &#54632;&#49688; &#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . - 기본구조 . 함수이름 &lt;- function(입력){ 함수의 기능 return(출력) } . f &lt;- function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id return(y) } . f(8) . 1 - 아래 두 코드는 거의 같다. . f &lt;- function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id return(y) # return은 생략해도 괜찮음. -&gt; y } f(8) # 2) d=8 I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id y . 1 1 두 코드의 차이: 1)의 코드에서 함수의 기능 부분에 입력된 변수는 컴퓨터에 따로 저장되지 않기에 해당 코드를 실행한 후 I0, Id, y를 다시 입력해도 저장된 값이 없지만 2)의 코드는 컴퓨터에 일일이 저장한 것이기 때문에 함수 설정에 사용된 변수가 불필요하게 저장된다. | .",
            "url": "https://ki5n2.github.io/cobalt-blue/2022/01/24/IR.html",
            "relUrl": "/2022/01/24/IR.html",
            "date": " • Jan 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ki5n2.github.io/cobalt-blue/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ki5n2.github.io/cobalt-blue/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "kione1 . 추후 업데이트 예정 &#8617; . |",
          "url": "https://ki5n2.github.io/cobalt-blue/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ki5n2.github.io/cobalt-blue/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}